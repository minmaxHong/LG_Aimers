# -*- coding: utf-8 -*-
"""Customer_type.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-VqHSwMWKh5i0VZbjE4tupAt9wXCkJ7a
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import random
import pandas as pd
import numpy as np
from sklearn.metrics import (
    accuracy_score,
    confusion_matrix,
    f1_score,
    precision_score,
    recall_score,
)
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

def seed_everything(seed):
  random.seed(seed)
  os.environ["PYTHONHASHSEED"] = str(seed)
  np.random.seed(seed)

seed_everything(42)

df_train = pd.read_csv("/content/drive/MyDrive/BITAmin/LG/lg_aimers.csv") # 학습용 데이터
df_test = pd.read_csv("/content/drive/MyDrive/BITAmin/LG/lg_aimers_submission.csv") # 테스트 데이터(제출파일의 데이터)

df_train.shape, df_test.shape

# == 컬럼별 NA율 90% 이상 컬럼 제외 ==
# == 중복되는 행 처리 ==
df_train = df_train.drop_duplicates()

print(f"\n중복 처리 난 뒤의 train shape : {df_train.shape}")

df_train['customer_type'].value_counts()

'''
[End Customer]
1. 제품이나 서비스를 최종적으로 구매하고 사용하는 고객
2. 제품 또는 서비스의 공급망에서 가장 끝 단계에 위치한 소비자
3. End User 또는 Ultimate Customer 라고 한다.
4. 한마디로 요약하면 -> 그냥 소비자임

[Specifier / Influencer]

<Specifier>
1. 특정 제품이나 서비스를 선택하고 결정하는 결정권을 지닌 사람
2. 기업(B2B)에서는 특정 제품을 결정하는 프로세스에서 엔지니어, 설계자, 기술자가 역할을 한다고 한다.
3. 제품의 기술적인 측면이나 특성을 고려하여 제품을 선택하게 되는데 -> 그 결과로 해당 제품의 스펙이 정해진다.

<Influencer>
1. 홍보 및 마케팅에서 소비자의 선택에 영향을 미치는 사람
2. 제품 또는 브랜드와 협력하여 제품을 소비장에게 소개하고 홍보 -> 제품의 인지도를 높여 구매결정에 영향


[Channel Partner]
1. 제조사와 고객 사이에 위치하여 제품을 유통하거나 판매하는데 기여한다.
2. 대리점, 유통업체, 리셀러, 디스트리뷰터 등 다양한 비즈니스 형태로 나타난다고 한다.

[Service Partner]
1. 기업이나 조직이 자체적으로 제공하기 어려운 특정 서비스 영역에서 전문성을 제공하는 역할
2. 서비스 제공, 기술 지원, 판매 지원, 컨설팅

'''

def cus_type_typo(df) :

  #  == 오타 먼저 전처리 ==
  replace_values_typo = {
      'End Customer' : 'End-Customer',
      'Other' : 'Others',
      'Etc.' : 'Others',
      'End-user' : 'End-Customer',
      'Specifier / Influencer' : 'Specifier/ Influencer',
      'Home Owner' : 'Homeowner',
      'Corporate' : 'Installer/Contractor',
      'Software / Solution Provider' : 'Software/Solution Provider',

  }

  # == 대체하기 ==
  replace_values =  {
      'Solution Eco-Partner' : 'Service Partner',
      'Engineer' : 'Specifier/ Influencer',
      'HVAC Engineer' : 'Specifier/ Influencer',
      'Technician' : 'Specifier/ Influencer',
      'Consultant' : 'Service Partner',
      'Developer' : 'Specifier/ Influencer',
      'Homeowner' : 'End-Customer',
      'Software/Solution Provider' : 'Service Partner', # 종합적인 solution을 제공한다고 생각하여 SP
      'Software / Solution Provider' : 'Service Partner', #
      'Manager / Director' : 'Specifier/ Influencer',
      'Installer' : 'Channel Partner', # 설치업자는 현장 설치를 전문적으로 수행한다고 생각함
      'Installer/Contractor' : 'Channel Partner',
      'Architect/Consultant' : 'Service Partner',
      'Distributor' : 'Channel Partner',
      'Reseller' : 'Channel Partner',
      'Dealer/Distributor' : 'Channel Partner',
      'System Integrator' : 'Service Partner',
      'Technical Assistant' : 'Service Partner',
      'Commercial end-user' : 'End-Customer',
      'Administrator' : 'Channel Partner',
      'Interior Designer' : 'Specifier/ Influencer'
  }
  df['customer_type'] = df['customer_type'].replace(replace_values_typo)
  df['customer_type'] = df['customer_type'].replace(replace_values)

  return df

df_train = cus_type_typo(df_train)
df_train['customer_type'].value_counts()